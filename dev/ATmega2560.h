// -- This file has been autogenerated - do not modify by hand
// -- This file is automatically included when necessary, don't include it in your own program
#ifndef _DEV_ATmega2560_H_
#define _DEV_ATmega2560_H_

#include "../libdefs.h"

#define EEPROM_SIZE 4096
// -- include EEPROM support --
#include <avr/eeprom.h>
// -------------- Define the I/O ports that haven't been disabled by the system file ------------
#ifdef PORTA
// Define Port A
	IOPort PROGMEM _PORTA={_SFR_MEM_ADDR(PORTA),_SFR_MEM_ADDR(DDRA),_SFR_MEM_ADDR(PINA)};
# ifdef PA0
	IOPin PROGMEM _A0 = { &_PORTA, BV(PA0)};
#	define A0 &_A0
#	undef PA0
# endif
# ifdef PA1
	IOPin PROGMEM _A1 = { &_PORTA, BV(PA1)};
#	define A1 &_A1
#	undef PA1
# endif
# ifdef PA2
	IOPin PROGMEM _A2 = { &_PORTA, BV(PA2)};
#	define A2 &_A2
#	undef PA2
# endif
# ifdef PA3
	IOPin PROGMEM _A3 = { &_PORTA, BV(PA3)};
#	define A3 &_A3
#	undef PA3
# endif
# ifdef PA4
	IOPin PROGMEM _A4 = { &_PORTA, BV(PA4)};
#	define A4 &_A4
#	undef PA4
# endif
# ifdef PA5
	IOPin PROGMEM _A5 = { &_PORTA, BV(PA5)};
#	define A5 &_A5
#	undef PA5
# endif
# ifdef PA6
	IOPin PROGMEM _A6 = { &_PORTA, BV(PA6)};
#	define A6 &_A6
#	undef PA6
# endif
# ifdef PA7
	IOPin PROGMEM _A7 = { &_PORTA, BV(PA7)};
#	define A7 &_A7
#	undef PA7
# endif
//undefine pins to stop them being used directly
# undef PORTA
# undef DDRA
# undef PINA
#endif

#ifdef PORTB
// Define Port B
	IOPort PROGMEM _PORTB={_SFR_MEM_ADDR(PORTB),_SFR_MEM_ADDR(DDRB),_SFR_MEM_ADDR(PINB)};
# ifdef PB0
	IOPin PROGMEM _B0 = { &_PORTB, BV(PB0)};
#	define B0 &_B0
#	undef PB0
# endif
# ifdef PB1
	IOPin PROGMEM _B1 = { &_PORTB, BV(PB1)};
#	define B1 &_B1
#	undef PB1
# endif
# ifdef PB2
	IOPin PROGMEM _B2 = { &_PORTB, BV(PB2)};
#	define B2 &_B2
#	undef PB2
# endif
# ifdef PB3
	IOPin PROGMEM _B3 = { &_PORTB, BV(PB3)};
#	define B3 &_B3
#	undef PB3
# endif
# ifdef PB4
	IOPin PROGMEM _B4 = { &_PORTB, BV(PB4)};
#	define B4 &_B4
#	undef PB4
# endif
# ifdef PB5
	IOPin PROGMEM _B5 = { &_PORTB, BV(PB5)};
#	define B5 &_B5
#	undef PB5
# endif
# ifdef PB6
	IOPin PROGMEM _B6 = { &_PORTB, BV(PB6)};
#	define B6 &_B6
#	undef PB6
# endif
# ifdef PB7
	IOPin PROGMEM _B7 = { &_PORTB, BV(PB7)};
#	define B7 &_B7
#	undef PB7
# endif
//undefine pins to stop them being used directly
# undef PORTB
# undef DDRB
# undef PINB
#endif

#ifdef PORTC
// Define Port C
	IOPort PROGMEM _PORTC={_SFR_MEM_ADDR(PORTC),_SFR_MEM_ADDR(DDRC),_SFR_MEM_ADDR(PINC)};
# ifdef PC0
	IOPin PROGMEM _C0 = { &_PORTC, BV(PC0)};
#	define C0 &_C0
#	undef PC0
# endif
# ifdef PC1
	IOPin PROGMEM _C1 = { &_PORTC, BV(PC1)};
#	define C1 &_C1
#	undef PC1
# endif
# ifdef PC2
	IOPin PROGMEM _C2 = { &_PORTC, BV(PC2)};
#	define C2 &_C2
#	undef PC2
# endif
# ifdef PC3
	IOPin PROGMEM _C3 = { &_PORTC, BV(PC3)};
#	define C3 &_C3
#	undef PC3
# endif
# ifdef PC4
	IOPin PROGMEM _C4 = { &_PORTC, BV(PC4)};
#	define C4 &_C4
#	undef PC4
# endif
# ifdef PC5
	IOPin PROGMEM _C5 = { &_PORTC, BV(PC5)};
#	define C5 &_C5
#	undef PC5
# endif
# ifdef PC6
	IOPin PROGMEM _C6 = { &_PORTC, BV(PC6)};
#	define C6 &_C6
#	undef PC6
# endif
# ifdef PC7
	IOPin PROGMEM _C7 = { &_PORTC, BV(PC7)};
#	define C7 &_C7
#	undef PC7
# endif
//undefine pins to stop them being used directly
# undef PORTC
# undef DDRC
# undef PINC
#endif

#ifdef PORTD
// Define Port D
	IOPort PROGMEM _PORTD={_SFR_MEM_ADDR(PORTD),_SFR_MEM_ADDR(DDRD),_SFR_MEM_ADDR(PIND)};
# ifdef PD0
	IOPin PROGMEM _D0 = { &_PORTD, BV(PD0)};
#	define D0 &_D0
#	undef PD0
# endif
# ifdef PD1
	IOPin PROGMEM _D1 = { &_PORTD, BV(PD1)};
#	define D1 &_D1
#	undef PD1
# endif
# ifdef PD2
	IOPin PROGMEM _D2 = { &_PORTD, BV(PD2)};
#	define D2 &_D2
#	undef PD2
# endif
# ifdef PD3
	IOPin PROGMEM _D3 = { &_PORTD, BV(PD3)};
#	define D3 &_D3
#	undef PD3
# endif
# ifdef PD4
	IOPin PROGMEM _D4 = { &_PORTD, BV(PD4)};
#	define D4 &_D4
#	undef PD4
# endif
# ifdef PD5
	IOPin PROGMEM _D5 = { &_PORTD, BV(PD5)};
#	define D5 &_D5
#	undef PD5
# endif
# ifdef PD6
	IOPin PROGMEM _D6 = { &_PORTD, BV(PD6)};
#	define D6 &_D6
#	undef PD6
# endif
# ifdef PD7
	IOPin PROGMEM _D7 = { &_PORTD, BV(PD7)};
#	define D7 &_D7
#	undef PD7
# endif
//undefine pins to stop them being used directly
# undef PORTD
# undef DDRD
# undef PIND
#endif

#ifdef PORTE
// Define Port E
	IOPort PROGMEM _PORTE={_SFR_MEM_ADDR(PORTE),_SFR_MEM_ADDR(DDRE),_SFR_MEM_ADDR(PINE)};
# ifdef PE0
	IOPin PROGMEM _E0 = { &_PORTE, BV(PE0)};
#	define E0 &_E0
#	undef PE0
# endif
# ifdef PE1
	IOPin PROGMEM _E1 = { &_PORTE, BV(PE1)};
#	define E1 &_E1
#	undef PE1
# endif
# ifdef PE2
	IOPin PROGMEM _E2 = { &_PORTE, BV(PE2)};
#	define E2 &_E2
#	undef PE2
# endif
# ifdef PE3
	IOPin PROGMEM _E3 = { &_PORTE, BV(PE3)};
#	define E3 &_E3
#	undef PE3
# endif
# ifdef PE4
	IOPin PROGMEM _E4 = { &_PORTE, BV(PE4)};
#	define E4 &_E4
#	undef PE4
# endif
# ifdef PE5
	IOPin PROGMEM _E5 = { &_PORTE, BV(PE5)};
#	define E5 &_E5
#	undef PE5
# endif
# ifdef PE6
	IOPin PROGMEM _E6 = { &_PORTE, BV(PE6)};
#	define E6 &_E6
#	undef PE6
# endif
# ifdef PE7
	IOPin PROGMEM _E7 = { &_PORTE, BV(PE7)};
#	define E7 &_E7
#	undef PE7
# endif
//undefine pins to stop them being used directly
# undef PORTE
# undef DDRE
# undef PINE
#endif

#ifdef PORTF
// Define Port F
	IOPort PROGMEM _PORTF={_SFR_MEM_ADDR(PORTF),_SFR_MEM_ADDR(DDRF),_SFR_MEM_ADDR(PINF)};
# ifdef PF0
	IOPin PROGMEM _F0 = { &_PORTF, BV(PF0)};
#	define F0 &_F0
#	undef PF0
# endif
# ifdef PF1
	IOPin PROGMEM _F1 = { &_PORTF, BV(PF1)};
#	define F1 &_F1
#	undef PF1
# endif
# ifdef PF2
	IOPin PROGMEM _F2 = { &_PORTF, BV(PF2)};
#	define F2 &_F2
#	undef PF2
# endif
# ifdef PF3
	IOPin PROGMEM _F3 = { &_PORTF, BV(PF3)};
#	define F3 &_F3
#	undef PF3
# endif
# ifdef PF4
	IOPin PROGMEM _F4 = { &_PORTF, BV(PF4)};
#	define F4 &_F4
#	undef PF4
# endif
# ifdef PF5
	IOPin PROGMEM _F5 = { &_PORTF, BV(PF5)};
#	define F5 &_F5
#	undef PF5
# endif
# ifdef PF6
	IOPin PROGMEM _F6 = { &_PORTF, BV(PF6)};
#	define F6 &_F6
#	undef PF6
# endif
# ifdef PF7
	IOPin PROGMEM _F7 = { &_PORTF, BV(PF7)};
#	define F7 &_F7
#	undef PF7
# endif
//undefine pins to stop them being used directly
# undef PORTF
# undef DDRF
# undef PINF
#endif

#ifdef PORTG
// Define Port G
	IOPort PROGMEM _PORTG={_SFR_MEM_ADDR(PORTG),_SFR_MEM_ADDR(DDRG),_SFR_MEM_ADDR(PING)};
# ifdef PG0
	IOPin PROGMEM _G0 = { &_PORTG, BV(PG0)};
#	define G0 &_G0
#	undef PG0
# endif
# ifdef PG1
	IOPin PROGMEM _G1 = { &_PORTG, BV(PG1)};
#	define G1 &_G1
#	undef PG1
# endif
# ifdef PG2
	IOPin PROGMEM _G2 = { &_PORTG, BV(PG2)};
#	define G2 &_G2
#	undef PG2
# endif
# ifdef PG3
	IOPin PROGMEM _G3 = { &_PORTG, BV(PG3)};
#	define G3 &_G3
#	undef PG3
# endif
# ifdef PG4
	IOPin PROGMEM _G4 = { &_PORTG, BV(PG4)};
#	define G4 &_G4
#	undef PG4
# endif
# ifdef PG5
	IOPin PROGMEM _G5 = { &_PORTG, BV(PG5)};
#	define G5 &_G5
#	undef PG5
# endif
# ifdef PG6
	IOPin PROGMEM _G6 = { &_PORTG, BV(PG6)};
#	define G6 &_G6
#	undef PG6
# endif
# ifdef PG7
	IOPin PROGMEM _G7 = { &_PORTG, BV(PG7)};
#	define G7 &_G7
#	undef PG7
# endif
//undefine pins to stop them being used directly
# undef PORTG
# undef DDRG
# undef PING
#endif

#ifdef PORTH
// Define Port H
	IOPort PROGMEM _PORTH={_SFR_MEM_ADDR(PORTH),_SFR_MEM_ADDR(DDRH),_SFR_MEM_ADDR(PINH)};
# ifdef PH0
	IOPin PROGMEM _H0 = { &_PORTH, BV(PH0)};
#	define H0 &_H0
#	undef PH0
# endif
# ifdef PH1
	IOPin PROGMEM _H1 = { &_PORTH, BV(PH1)};
#	define H1 &_H1
#	undef PH1
# endif
# ifdef PH2
	IOPin PROGMEM _H2 = { &_PORTH, BV(PH2)};
#	define H2 &_H2
#	undef PH2
# endif
# ifdef PH3
	IOPin PROGMEM _H3 = { &_PORTH, BV(PH3)};
#	define H3 &_H3
#	undef PH3
# endif
# ifdef PH4
	IOPin PROGMEM _H4 = { &_PORTH, BV(PH4)};
#	define H4 &_H4
#	undef PH4
# endif
# ifdef PH5
	IOPin PROGMEM _H5 = { &_PORTH, BV(PH5)};
#	define H5 &_H5
#	undef PH5
# endif
# ifdef PH6
	IOPin PROGMEM _H6 = { &_PORTH, BV(PH6)};
#	define H6 &_H6
#	undef PH6
# endif
# ifdef PH7
	IOPin PROGMEM _H7 = { &_PORTH, BV(PH7)};
#	define H7 &_H7
#	undef PH7
# endif
//undefine pins to stop them being used directly
# undef PORTH
# undef DDRH
# undef PINH
#endif

#ifdef PORTJ
// Define Port J
	IOPort PROGMEM _PORTJ={_SFR_MEM_ADDR(PORTJ),_SFR_MEM_ADDR(DDRJ),_SFR_MEM_ADDR(PINJ)};
# ifdef PJ0
	IOPin PROGMEM _J0 = { &_PORTJ, BV(PJ0)};
#	define J0 &_J0
#	undef PJ0
# endif
# ifdef PJ1
	IOPin PROGMEM _J1 = { &_PORTJ, BV(PJ1)};
#	define J1 &_J1
#	undef PJ1
# endif
# ifdef PJ2
	IOPin PROGMEM _J2 = { &_PORTJ, BV(PJ2)};
#	define J2 &_J2
#	undef PJ2
# endif
# ifdef PJ3
	IOPin PROGMEM _J3 = { &_PORTJ, BV(PJ3)};
#	define J3 &_J3
#	undef PJ3
# endif
# ifdef PJ4
	IOPin PROGMEM _J4 = { &_PORTJ, BV(PJ4)};
#	define J4 &_J4
#	undef PJ4
# endif
# ifdef PJ5
	IOPin PROGMEM _J5 = { &_PORTJ, BV(PJ5)};
#	define J5 &_J5
#	undef PJ5
# endif
# ifdef PJ6
	IOPin PROGMEM _J6 = { &_PORTJ, BV(PJ6)};
#	define J6 &_J6
#	undef PJ6
# endif
# ifdef PJ7
	IOPin PROGMEM _J7 = { &_PORTJ, BV(PJ7)};
#	define J7 &_J7
#	undef PJ7
# endif
//undefine pins to stop them being used directly
# undef PORTJ
# undef DDRJ
# undef PINJ
#endif

#ifdef PORTK
// Define Port K
	IOPort PROGMEM _PORTK={_SFR_MEM_ADDR(PORTK),_SFR_MEM_ADDR(DDRK),_SFR_MEM_ADDR(PINK)};
# ifdef PK0
	IOPin PROGMEM _K0 = { &_PORTK, BV(PK0)};
#	define K0 &_K0
#	undef PK0
# endif
# ifdef PK1
	IOPin PROGMEM _K1 = { &_PORTK, BV(PK1)};
#	define K1 &_K1
#	undef PK1
# endif
# ifdef PK2
	IOPin PROGMEM _K2 = { &_PORTK, BV(PK2)};
#	define K2 &_K2
#	undef PK2
# endif
# ifdef PK3
	IOPin PROGMEM _K3 = { &_PORTK, BV(PK3)};
#	define K3 &_K3
#	undef PK3
# endif
# ifdef PK4
	IOPin PROGMEM _K4 = { &_PORTK, BV(PK4)};
#	define K4 &_K4
#	undef PK4
# endif
# ifdef PK5
	IOPin PROGMEM _K5 = { &_PORTK, BV(PK5)};
#	define K5 &_K5
#	undef PK5
# endif
# ifdef PK6
	IOPin PROGMEM _K6 = { &_PORTK, BV(PK6)};
#	define K6 &_K6
#	undef PK6
# endif
# ifdef PK7
	IOPin PROGMEM _K7 = { &_PORTK, BV(PK7)};
#	define K7 &_K7
#	undef PK7
# endif
//undefine pins to stop them being used directly
# undef PORTK
# undef DDRK
# undef PINK
#endif

#ifdef PORTL
// Define Port L
	IOPort PROGMEM _PORTL={_SFR_MEM_ADDR(PORTL),_SFR_MEM_ADDR(DDRL),_SFR_MEM_ADDR(PINL)};
# ifdef PL0
	IOPin PROGMEM _L0 = { &_PORTL, BV(PL0)};
#	define L0 &_L0
#	undef PL0
# endif
# ifdef PL1
	IOPin PROGMEM _L1 = { &_PORTL, BV(PL1)};
#	define L1 &_L1
#	undef PL1
# endif
# ifdef PL2
	IOPin PROGMEM _L2 = { &_PORTL, BV(PL2)};
#	define L2 &_L2
#	undef PL2
# endif
# ifdef PL3
	IOPin PROGMEM _L3 = { &_PORTL, BV(PL3)};
#	define L3 &_L3
#	undef PL3
# endif
# ifdef PL4
	IOPin PROGMEM _L4 = { &_PORTL, BV(PL4)};
#	define L4 &_L4
#	undef PL4
# endif
# ifdef PL5
	IOPin PROGMEM _L5 = { &_PORTL, BV(PL5)};
#	define L5 &_L5
#	undef PL5
# endif
# ifdef PL6
	IOPin PROGMEM _L6 = { &_PORTL, BV(PL6)};
#	define L6 &_L6
#	undef PL6
# endif
# ifdef PL7
	IOPin PROGMEM _L7 = { &_PORTL, BV(PL7)};
#	define L7 &_L7
#	undef PL7
# endif
//undefine pins to stop them being used directly
# undef PORTL
# undef DDRL
# undef PINL
#endif

// -------------- End of I/O ports --------------------------------------------------------------

// -------------- Define the PWM pins that haven't been disabled by the system file -------------
#ifdef B7
# define PWM0A B7
#else
# define PWM0A null
#endif
#ifdef G5
# define PWM0B G5
#else
# define PWM0B null
#endif
#ifdef B5
# define PWM1A B5
#else
# define PWM1A null
#endif
#ifdef B6
# define PWM1B B6
#else
# define PWM1B null
#endif
#ifdef B7
# define PWM1C B7
#else
# define PWM1C null
#endif
#ifdef B4
# define PWM2A B4
#else
# define PWM2A null
#endif
#ifdef H6
# define PWM2B H6
#else
# define PWM2B null
#endif
#ifdef E3
# define PWM3A E3
#else
# define PWM3A null
#endif
#ifdef E4
# define PWM3B E4
#else
# define PWM3B null
#endif
#ifdef E5
# define PWM3C E5
#else
# define PWM3C null
#endif
#ifdef H3
# define PWM4A H3
#else
# define PWM4A null
#endif
#ifdef H4
# define PWM4B H4
#else
# define PWM4B null
#endif
#ifdef H5
# define PWM4C H5
#else
# define PWM4C null
#endif
#ifdef L3
# define PWM5A L3
#else
# define PWM5A null
#endif
#ifdef L4
# define PWM5B L4
#else
# define PWM5B null
#endif
#ifdef L5
# define PWM5C L5
#else
# define PWM5C null
#endif
// -------------- End of PWM pins ---------------------------------------------------------------

// -------------- Define the timers -------------------------------------------------------------

// Create Timer 0
TimerData __timer0_data = MAKE_TIMER_DATA(0);
TimerDataCompare __timer0CompareA_data = MAKE_TIMER_COMPARE_DATA();
TimerDataCompare __timer0CompareB_data = MAKE_TIMER_COMPARE_DATA();
TimerCompare PROGMEM __timer0Compare[] = {
	MAKE_TIMER_COMPARE(__timer0CompareA_data,0,TIMSK0,OCIE0A,OCR0A,TIFR0,OCF0A,TCCR0A,COM0A0,PWM0A),
	MAKE_TIMER_COMPARE(__timer0CompareB_data,0,TIMSK0,OCIE0B,OCR0B,TIFR0,OCF0B,TCCR0A,COM0B0,PWM0B)
};
#define TIMER0_COMPAREA &__timer0Compare[0]
#define TIMER0_COMPAREB &__timer0Compare[1]

// Create Timer 1
TimerData __timer1_data = MAKE_TIMER_DATA(0);
TimerDataCompare __timer1CompareA_data = MAKE_TIMER_COMPARE_DATA();
TimerDataCompare __timer1CompareB_data = MAKE_TIMER_COMPARE_DATA();
TimerDataCompare __timer1CompareC_data = MAKE_TIMER_COMPARE_DATA();
TimerCompare PROGMEM __timer1Compare[] = {
	MAKE_TIMER_COMPARE(__timer1CompareA_data,1,TIMSK1,OCIE1A,OCR1A,TIFR1,OCF1A,TCCR1A,COM1A0,PWM1A),
	MAKE_TIMER_COMPARE(__timer1CompareB_data,1,TIMSK1,OCIE1B,OCR1B,TIFR1,OCF1B,TCCR1A,COM1B0,PWM1B),
	MAKE_TIMER_COMPARE(__timer1CompareC_data,1,TIMSK1,OCIE1C,OCR1C,TIFR1,OCF1C,TCCR1A,COM1C0,PWM1C)
};
#define TIMER1_COMPAREA &__timer1Compare[0]
#define TIMER1_COMPAREB &__timer1Compare[1]
#define TIMER1_COMPAREC &__timer1Compare[2]

// Create Timer 2
TimerData __timer2_data = MAKE_TIMER_DATA(0);
TimerDataCompare __timer2CompareA_data = MAKE_TIMER_COMPARE_DATA();
TimerDataCompare __timer2CompareB_data = MAKE_TIMER_COMPARE_DATA();
TimerCompare PROGMEM __timer2Compare[] = {
	MAKE_TIMER_COMPARE(__timer2CompareA_data,2,TIMSK2,OCIE2A,OCR2A,TIFR2,OCF2A,TCCR2A,COM2A0,PWM2A),
	MAKE_TIMER_COMPARE(__timer2CompareB_data,2,TIMSK2,OCIE2B,OCR2B,TIFR2,OCF2B,TCCR2A,COM2B0,PWM2B)
};
#define TIMER2_COMPAREA &__timer2Compare[0]
#define TIMER2_COMPAREB &__timer2Compare[1]

// Create Timer 3
TimerData __timer3_data = MAKE_TIMER_DATA(0);
TimerDataCompare __timer3CompareA_data = MAKE_TIMER_COMPARE_DATA();
TimerDataCompare __timer3CompareB_data = MAKE_TIMER_COMPARE_DATA();
TimerDataCompare __timer3CompareC_data = MAKE_TIMER_COMPARE_DATA();
TimerCompare PROGMEM __timer3Compare[] = {
	MAKE_TIMER_COMPARE(__timer3CompareA_data,3,TIMSK3,OCIE3A,OCR3A,TIFR3,OCF3A,TCCR3A,COM3A0,PWM3A),
	MAKE_TIMER_COMPARE(__timer3CompareB_data,3,TIMSK3,OCIE3B,OCR3B,TIFR3,OCF3B,TCCR3A,COM3B0,PWM3B),
	MAKE_TIMER_COMPARE(__timer3CompareC_data,3,TIMSK3,OCIE3C,OCR3C,TIFR3,OCF3C,TCCR3A,COM3C0,PWM3C)
};
#define TIMER3_COMPAREA &__timer3Compare[0]
#define TIMER3_COMPAREB &__timer3Compare[1]
#define TIMER3_COMPAREC &__timer3Compare[2]

// Create Timer 4
TimerData __timer4_data = MAKE_TIMER_DATA(0);
TimerDataCompare __timer4CompareA_data = MAKE_TIMER_COMPARE_DATA();
TimerDataCompare __timer4CompareB_data = MAKE_TIMER_COMPARE_DATA();
TimerDataCompare __timer4CompareC_data = MAKE_TIMER_COMPARE_DATA();
TimerCompare PROGMEM __timer4Compare[] = {
	MAKE_TIMER_COMPARE(__timer4CompareA_data,4,TIMSK4,OCIE4A,OCR4A,TIFR4,OCF4A,TCCR4A,COM4A0,PWM4A),
	MAKE_TIMER_COMPARE(__timer4CompareB_data,4,TIMSK4,OCIE4B,OCR4B,TIFR4,OCF4B,TCCR4A,COM4B0,PWM4B),
	MAKE_TIMER_COMPARE(__timer4CompareC_data,4,TIMSK4,OCIE4C,OCR4C,TIFR4,OCF4C,TCCR4A,COM4C0,PWM4C)
};
#define TIMER4_COMPAREA &__timer4Compare[0]
#define TIMER4_COMPAREB &__timer4Compare[1]
#define TIMER4_COMPAREC &__timer4Compare[2]

// Create Timer 5
TimerData __timer5_data = MAKE_TIMER_DATA(0);
TimerDataCompare __timer5CompareA_data = MAKE_TIMER_COMPARE_DATA();
TimerDataCompare __timer5CompareB_data = MAKE_TIMER_COMPARE_DATA();
TimerDataCompare __timer5CompareC_data = MAKE_TIMER_COMPARE_DATA();
TimerCompare PROGMEM __timer5Compare[] = {
	MAKE_TIMER_COMPARE(__timer5CompareA_data,5,TIMSK5,OCIE5A,OCR5A,TIFR5,OCF5A,TCCR5A,COM5A0,PWM5A),
	MAKE_TIMER_COMPARE(__timer5CompareB_data,5,TIMSK5,OCIE5B,OCR5B,TIFR5,OCF5B,TCCR5A,COM5B0,PWM5B),
	MAKE_TIMER_COMPARE(__timer5CompareC_data,5,TIMSK5,OCIE5C,OCR5C,TIFR5,OCF5C,TCCR5A,COM5C0,PWM5C)
};
#define TIMER5_COMPAREA &__timer5Compare[0]
#define TIMER5_COMPAREB &__timer5Compare[1]
#define TIMER5_COMPAREC &__timer5Compare[2]

// Input Capture pins for each timer
#define InputCapture0 null
#ifdef D4
#define InputCapture1 D4
#else
#define InputCapture1 null
#endif
#define InputCapture2 null
#ifdef E7
#define InputCapture3 E7
#else
#define InputCapture3 null
#endif
#ifdef L0
#define InputCapture4 L0
#else
#define InputCapture4 null
#endif
#ifdef L1
#define InputCapture5 L1
#else
#define InputCapture5 null
#endif

const PROGMEM Timer PROGMEM pgm_Timers[] = {
	MAKE_TIMER(__timer0_data,TCNT0,TCCR0B, FALSE, FALSE, TIMER_3BIT_MODES,TCCR0A,WGM00,TCCR0A,WGM01,TCCR0B,WGM02,UNUSED_PORT,0,__timer0Compare, TIMSK0,TOIE0, TIFR0,TOV0, UNUSED_PORT, UNUSED_PORT,0, UNUSED_PORT,0, UNUSED_PORT,0, InputCapture0),
	MAKE_TIMER(__timer1_data,TCNT1,TCCR1B, TRUE, FALSE, TIMER_ALL_MODES,TCCR1A,WGM10,TCCR1A,WGM11,TCCR1B,WGM12,TCCR1B,WGM13,__timer1Compare, TIMSK1,TOIE1, TIFR1,TOV1, ICR1, TIMSK1,ICIE1, TIFR1,ICF1, TCCR1B,ICES1, InputCapture1),
	MAKE_TIMER(__timer2_data,TCNT2,TCCR2B, FALSE, TRUE, TIMER_3BIT_MODES,TCCR2A,WGM20,TCCR2A,WGM21,TCCR2B,WGM22,UNUSED_PORT,0,__timer2Compare, TIMSK2,TOIE2, TIFR2,TOV2, UNUSED_PORT, UNUSED_PORT,0, UNUSED_PORT,0, UNUSED_PORT,0, InputCapture2),
	MAKE_TIMER(__timer3_data,TCNT3,TCCR3B, TRUE, FALSE, TIMER_ALL_MODES,TCCR3A,WGM30,TCCR3A,WGM31,TCCR3B,WGM32,TCCR3B,WGM33,__timer3Compare, TIMSK3,TOIE3, TIFR3,TOV3, ICR3, TIMSK3,ICIE3, TIFR3,ICF3, TCCR3B,ICES3, InputCapture3),
	MAKE_TIMER(__timer4_data,TCNT4,TCCR4B, TRUE, FALSE, TIMER_ALL_MODES,TCCR4A,WGM40,TCCR4A,WGM41,TCCR4B,WGM42,TCCR4B,WGM43,__timer4Compare, TIMSK4,TOIE4, TIFR4,TOV4, ICR4, TIMSK4,ICIE4, TIFR4,ICF4, TCCR4B,ICES4, InputCapture4),
	MAKE_TIMER(__timer5_data,TCNT5,TCCR5B, TRUE, FALSE, TIMER_ALL_MODES,TCCR5A,WGM50,TCCR5A,WGM51,TCCR5B,WGM52,TCCR5B,WGM53,__timer5Compare, TIMSK5,TOIE5, TIFR5,TOV5, ICR5, TIMSK5,ICIE5, TIFR5,ICF5, TCCR5B,ICES5, InputCapture5)
};
const uint8_t NUMBER_OF_TIMERS =  (sizeof(pgm_Timers)/sizeof(Timer));
#define TIMER0 &pgm_Timers[0]
#define TIMER1 &pgm_Timers[1]
#define TIMER2 &pgm_Timers[2]
#define TIMER3 &pgm_Timers[3]
#define TIMER4 &pgm_Timers[4]
#define TIMER5 &pgm_Timers[5]
// -------------- End of timer definitions ------------------------------------------------------

// -------------- Define the UARTs --------------------------------------------------------------
#include "../uart.h"
// -- Create receive buffers
#ifdef UART_RX_BUFFER_SIZE
# ifndef UART0_RX_BUFFER_SIZE
   // Use default value
#  define UART0_RX_BUFFER_SIZE  UART_RX_BUFFER_SIZE
# endif
# ifndef UART1_RX_BUFFER_SIZE
   // Use default value
#  define UART1_RX_BUFFER_SIZE  UART_RX_BUFFER_SIZE
# endif
# ifndef UART2_RX_BUFFER_SIZE
   // Use default value
#  define UART2_RX_BUFFER_SIZE  UART_RX_BUFFER_SIZE
# endif
# ifndef UART3_RX_BUFFER_SIZE
   // Use default value
#  define UART3_RX_BUFFER_SIZE  UART_RX_BUFFER_SIZE
# endif
#endif


#ifdef UART0_RX_BUFFER_SIZE
  unsigned char rx0Buf[UART0_RX_BUFFER_SIZE];
  cBuffer rx0Buffer = MAKE_BUFFER(rx0Buf);
# define rx0B &rx0Buffer
#else
# define rx0B null
#endif

#ifdef UART1_RX_BUFFER_SIZE
  unsigned char rx1Buf[UART1_RX_BUFFER_SIZE];
  cBuffer rx1Buffer = MAKE_BUFFER(rx1Buf);
# define rx1B &rx1Buffer
#else
# define rx1B null
#endif

#ifdef UART2_RX_BUFFER_SIZE
  unsigned char rx2Buf[UART2_RX_BUFFER_SIZE];
  cBuffer rx2Buffer = MAKE_BUFFER(rx2Buf);
# define rx2B &rx2Buffer
#else
# define rx2B null
#endif

#ifdef UART3_RX_BUFFER_SIZE
  unsigned char rx3Buf[UART3_RX_BUFFER_SIZE];
  cBuffer rx3Buffer = MAKE_BUFFER(rx3Buf);
# define rx3B &rx3Buffer
#else
# define rx3B null
#endif

// -- Create transmit buffers
#ifdef UART_TX_BUFFER_SIZE
# ifndef UART0_TX_BUFFER_SIZE
   // Use default value
#  define UART0_TX_BUFFER_SIZE  UART_TX_BUFFER_SIZE
# endif
# ifndef UART1_TX_BUFFER_SIZE
   // Use default value
#  define UART1_TX_BUFFER_SIZE  UART_TX_BUFFER_SIZE
# endif
# ifndef UART2_TX_BUFFER_SIZE
   // Use default value
#  define UART2_TX_BUFFER_SIZE  UART_TX_BUFFER_SIZE
# endif
# ifndef UART3_TX_BUFFER_SIZE
   // Use default value
#  define UART3_TX_BUFFER_SIZE  UART_TX_BUFFER_SIZE
# endif
#endif


#ifdef UART0_TX_BUFFER_SIZE
  unsigned char tx0Buf[UART0_TX_BUFFER_SIZE];
  cBuffer tx0Buffer = MAKE_BUFFER(tx0Buf);
# define tx0B &tx0Buffer
#else
# define tx0B null
#endif

#ifdef UART1_TX_BUFFER_SIZE
  unsigned char tx1Buf[UART1_TX_BUFFER_SIZE];
  cBuffer tx1Buffer = MAKE_BUFFER(tx1Buf);
# define tx1B &tx1Buffer
#else
# define tx1B null
#endif

#ifdef UART2_TX_BUFFER_SIZE
  unsigned char tx2Buf[UART2_TX_BUFFER_SIZE];
  cBuffer tx2Buffer = MAKE_BUFFER(tx2Buf);
# define tx2B &tx2Buffer
#else
# define tx2B null
#endif

#ifdef UART3_TX_BUFFER_SIZE
  unsigned char tx3Buf[UART3_TX_BUFFER_SIZE];
  cBuffer tx3Buffer = MAKE_BUFFER(tx3Buf);
# define tx3B &tx3Buffer
#else
# define tx3B null
#endif

// -- Define the pin used for the SPI clock, if supported, for each uart
/* UART0 has SPI mode with clock on E2*/
#ifdef E2
# define UART_SPI_CLOCK0 E2
#else
# define UART_SPI_CLOCK0 null
#endif
/* UART1 has SPI mode with clock on D5*/
#ifdef D5
# define UART_SPI_CLOCK1 D5
#else
# define UART_SPI_CLOCK1 null
#endif
/* UART2 has SPI mode with clock on H2*/
#ifdef H2
# define UART_SPI_CLOCK2 H2
#else
# define UART_SPI_CLOCK2 null
#endif
/* UART3 has SPI mode with clock on J2*/
#ifdef J2
# define UART_SPI_CLOCK3 J2
#else
# define UART_SPI_CLOCK3 null
#endif


#define _NUM_UARTS 4
const uint8_t NUM_UARTS = _NUM_UARTS;

HW_UART Uarts[] = {
	MAKE_UART_BUFFERED(rx0B,tx0B,UCSR0A,UCSR0B,UBRR0L,UBRR0H,UDR0,UART_SPI_CLOCK0,2,E0,E1,&uart0GetByte,&uart0SendByte),
	MAKE_UART_BUFFERED(rx1B,tx1B,UCSR1A,UCSR1B,UBRR1L,UBRR1H,UDR1,UART_SPI_CLOCK1,2,D2,D3,&uart1GetByte,&uart1SendByte),
	MAKE_UART_BUFFERED(rx2B,tx2B,UCSR2A,UCSR2B,UBRR2L,UBRR2H,UDR2,UART_SPI_CLOCK2,2,H0,H1,&uart2GetByte,&uart2SendByte),
	MAKE_UART_BUFFERED(rx3B,tx3B,UCSR3A,UCSR3B,UBRR3L,UBRR3H,UDR3,UART_SPI_CLOCK3,2,J0,J1,&uart3GetByte,&uart3SendByte)
};

#define UART0 &Uarts[0]
#define UART1 &Uarts[1]
#define UART2 &Uarts[2]
#define UART3 &Uarts[3]
// -------------- End of UART definitions -------------------------------------------------------

// -------------- Start of ADC channel definitions ----------------------------------------------
#define ADC0 ADC_NUMBER_TO_CHANNEL(0)
#define ADC1 ADC_NUMBER_TO_CHANNEL(1)
#define ADC2 ADC_NUMBER_TO_CHANNEL(2)
#define ADC3 ADC_NUMBER_TO_CHANNEL(3)
#define ADC4 ADC_NUMBER_TO_CHANNEL(4)
#define ADC5 ADC_NUMBER_TO_CHANNEL(5)
#define ADC6 ADC_NUMBER_TO_CHANNEL(6)
#define ADC7 ADC_NUMBER_TO_CHANNEL(7)
#define ADC8 ADC_NUMBER_TO_CHANNEL(8)
#define ADC9 ADC_NUMBER_TO_CHANNEL(9)
#define ADC10 ADC_NUMBER_TO_CHANNEL(10)
#define ADC11 ADC_NUMBER_TO_CHANNEL(11)
#define ADC12 ADC_NUMBER_TO_CHANNEL(12)
#define ADC13 ADC_NUMBER_TO_CHANNEL(13)
#define ADC14 ADC_NUMBER_TO_CHANNEL(14)
#define ADC15 ADC_NUMBER_TO_CHANNEL(15)
const uint8_t NUM_ADC_CHANNELS = 16;
// -------------- End of ADC channel definitions ------------------------------------------------

// -------------- Define which IOPin is used by the pin change interrupts --------------------------------
const IOPin* PROGMEM PCINT_PINS[]={
// PCINT 0
#	ifdef B0
	B0,
#	else
	null,
#	endif
// PCINT 1
#	ifdef B1
	B1,
#	else
	null,
#	endif
// PCINT 2
#	ifdef B2
	B2,
#	else
	null,
#	endif
// PCINT 3
#	ifdef B3
	B3,
#	else
	null,
#	endif
// PCINT 4
#	ifdef B4
	B4,
#	else
	null,
#	endif
// PCINT 5
#	ifdef B5
	B5,
#	else
	null,
#	endif
// PCINT 6
#	ifdef B6
	B6,
#	else
	null,
#	endif
// PCINT 7
#	ifdef B7
	B7,
#	else
	null,
#	endif
// PCINT 8
#	ifdef E0
	E0,
#	else
	null,
#	endif
// PCINT 9
#	ifdef J0
	J0,
#	else
	null,
#	endif
// PCINT 10
#	ifdef J1
	J1,
#	else
	null,
#	endif
// PCINT 11
#	ifdef J2
	J2,
#	else
	null,
#	endif
// PCINT 12
#	ifdef J3
	J3,
#	else
	null,
#	endif
// PCINT 13
#	ifdef J4
	J4,
#	else
	null,
#	endif
// PCINT 14
#	ifdef J5
	J5,
#	else
	null,
#	endif
// PCINT 15
#	ifdef J6
	J6,
#	else
	null,
#	endif
// PCINT 16
#	ifdef K0
	K0,
#	else
	null,
#	endif
// PCINT 17
#	ifdef K1
	K1,
#	else
	null,
#	endif
// PCINT 18
#	ifdef K2
	K2,
#	else
	null,
#	endif
// PCINT 19
#	ifdef K3
	K3,
#	else
	null,
#	endif
// PCINT 20
#	ifdef K4
	K4,
#	else
	null,
#	endif
// PCINT 21
#	ifdef K5
	K5,
#	else
	null,
#	endif
// PCINT 22
#	ifdef K6
	K6,
#	else
	null,
#	endif
// PCINT 23
#	ifdef K7
	K7
#	else
	null
#	endif
};
#define _NUM_PCINT_PINS 24
const uint8_t NUM_PCINT_PINS = 24;
// -------------- End of pin change definitions - ------------------------------------------------

#endif
